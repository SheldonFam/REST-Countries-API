{"ast":null,"code":"var _jsxFileName = \"C:\\\\React Project\\\\rest-countries-api\\\\src\\\\components\\\\CountryList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Country from \"./Country\";\nimport Loading from \"./Loading\"; //name,name.common\n//population\n//region\n//capital\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CountryList = () => {\n  _s();\n\n  const URL = \"https://restcountries.com/v3.1/all\";\n  const [countries, setCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // const [searchInput, setSearchInput] = useState(\"\");\n\n  useEffect(() => {\n    const fetchCountry = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(URL);\n        const data = await response.json();\n        setCountries(data);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        console.log(error);\n      }\n    };\n\n    fetchCountry();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container-block\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this) : countries.map((country, index) => {\n        return /*#__PURE__*/_jsxDEV(Country, {\n          name: country.name.common,\n          capital: country.capital,\n          population: country.population,\n          image: country.flags.svg,\n          region: country.region\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CountryList, \"dqaBV1ASDFycGqddMzhgmNMIRz4=\");\n\n_c = CountryList;\nexport default CountryList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountryList\");","map":{"version":3,"names":["useState","useEffect","Country","Loading","CountryList","URL","countries","setCountries","isLoading","setIsLoading","fetchCountry","response","fetch","data","json","error","console","log","map","country","index","name","common","capital","population","flags","svg","region"],"sources":["C:/React Project/rest-countries-api/src/components/CountryList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Country from \"./Country\";\r\nimport Loading from \"./Loading\";\r\n\r\n//name,name.common\r\n//population\r\n//region\r\n//capital\r\nconst CountryList = () => {\r\n  const URL = \"https://restcountries.com/v3.1/all\";\r\n  const [countries, setCountries] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  // const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchCountry = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await fetch(URL);\r\n        const data = await response.json();\r\n        setCountries(data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setIsLoading(false);\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchCountry();\r\n  }, []);\r\n\r\n  return (\r\n    <main>\r\n      <section className=\"container-block\">\r\n        {isLoading ? (\r\n          <Loading />\r\n        ) : (\r\n          countries.map((country, index) => {\r\n            return (\r\n              <Country\r\n                key={index}\r\n                name={country.name.common}\r\n                capital={country.capital}\r\n                population={country.population}\r\n                image={country.flags.svg}\r\n                region={country.region}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default CountryList;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;AACA;AACA;;;;AACA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB,MAAMC,GAAG,GAAG,oCAAZ;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C,CAHwB,CAIxB;;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMS,YAAY,GAAG,YAAY;MAC/BD,YAAY,CAAC,IAAD,CAAZ;;MACA,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,CAA5B;QACA,MAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;QACAP,YAAY,CAACM,IAAD,CAAZ;QACAJ,YAAY,CAAC,KAAD,CAAZ;MACD,CALD,CAKE,OAAOM,KAAP,EAAc;QACdN,YAAY,CAAC,KAAD,CAAZ;QACAO,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACD;IACF,CAXD;;IAYAL,YAAY;EACb,CAdQ,EAcN,EAdM,CAAT;EAgBA,oBACE;IAAA,uBACE;MAAS,SAAS,EAAC,iBAAnB;MAAA,UACGF,SAAS,gBACR,QAAC,OAAD;QAAA;QAAA;QAAA;MAAA,QADQ,GAGRF,SAAS,CAACY,GAAV,CAAc,CAACC,OAAD,EAAUC,KAAV,KAAoB;QAChC,oBACE,QAAC,OAAD;UAEE,IAAI,EAAED,OAAO,CAACE,IAAR,CAAaC,MAFrB;UAGE,OAAO,EAAEH,OAAO,CAACI,OAHnB;UAIE,UAAU,EAAEJ,OAAO,CAACK,UAJtB;UAKE,KAAK,EAAEL,OAAO,CAACM,KAAR,CAAcC,GALvB;UAME,MAAM,EAAEP,OAAO,CAACQ;QANlB,GACOP,KADP;UAAA;UAAA;UAAA;QAAA,QADF;MAUD,CAXD;IAJJ;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAsBD,CA5CD;;GAAMhB,W;;KAAAA,W;AA8CN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}
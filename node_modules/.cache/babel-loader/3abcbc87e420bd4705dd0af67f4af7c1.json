{"ast":null,"code":"var _jsxFileName = \"C:\\\\React Project\\\\rest-countries-api\\\\src\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = \"https://restcountries.com/v3.1/all/\";\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, setLoading] = useState(true); // const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const [countries, setCountries] = useState([]);\n\n  const fetchCountry = async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${url}`);\n      const data = response.json();\n      const {\n        country\n      } = data;\n      console.log(data);\n\n      if (country) {\n        const newCountry = country.map(item => {\n          const {\n            name,\n            flags,\n            population,\n            region,\n            capital\n          } = item;\n          return {\n            name: name,\n            img: flags,\n            population: population,\n            region: region,\n            capital: capital\n          };\n        });\n        setCountries(newCountry);\n      } else {\n        setCountries([]);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchCountry();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      loading,\n      countries\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppProvider, \"MTN7/oP/QA+CPtZeBR/k+XxqvVM=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","countries","setCountries","fetchCountry","response","fetch","data","json","country","console","log","newCountry","map","item","name","flags","population","region","capital","img","error","useGlobalContext"],"sources":["C:/React Project/rest-countries-api/src/context.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useCallback } from \"react\";\r\n\r\nconst url = \"https://restcountries.com/v3.1/all/\";\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  // const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  const fetchCountry = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`${url}`);\r\n      const data = response.json();\r\n      const { country } = data;\r\n      console.log(data);\r\n      if (country) {\r\n        const newCountry = country.map((item) => {\r\n          const { name, flags, population, region, capital } = item;\r\n          return {\r\n            name: name,\r\n            img: flags,\r\n            population: population,\r\n            region: region,\r\n            capital: capital,\r\n          };\r\n        });\r\n        setCountries(newCountry);\r\n      } else {\r\n        setCountries([]);\r\n      }\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchCountry();\r\n  }, []);\r\n  return (\r\n    <AppContext.Provider value={{ loading, countries }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;;AAEA,MAAMC,GAAG,GAAG,qCAAZ;AACA,MAAMC,UAAU,gBAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACpC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC,CADoC,CAEpC;;EACA,MAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;;EAEA,MAAMa,YAAY,GAAG,YAAY;IAC/BH,UAAU,CAAC,IAAD,CAAV;;IACA,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,GAAI,EAAR,CAA5B;MACA,MAAMY,IAAI,GAAGF,QAAQ,CAACG,IAAT,EAAb;MACA,MAAM;QAAEC;MAAF,IAAcF,IAApB;MACAG,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;MACA,IAAIE,OAAJ,EAAa;QACX,MAAMG,UAAU,GAAGH,OAAO,CAACI,GAAR,CAAaC,IAAD,IAAU;UACvC,MAAM;YAAEC,IAAF;YAAQC,KAAR;YAAeC,UAAf;YAA2BC,MAA3B;YAAmCC;UAAnC,IAA+CL,IAArD;UACA,OAAO;YACLC,IAAI,EAAEA,IADD;YAELK,GAAG,EAAEJ,KAFA;YAGLC,UAAU,EAAEA,UAHP;YAILC,MAAM,EAAEA,MAJH;YAKLC,OAAO,EAAEA;UALJ,CAAP;QAOD,CATkB,CAAnB;QAUAhB,YAAY,CAACS,UAAD,CAAZ;MACD,CAZD,MAYO;QACLT,YAAY,CAAC,EAAD,CAAZ;MACD;;MACDF,UAAU,CAAC,KAAD,CAAV;IACD,CArBD,CAqBE,OAAOoB,KAAP,EAAc;MACdX,OAAO,CAACC,GAAR,CAAYU,KAAZ;MACApB,UAAU,CAAC,KAAD,CAAV;IACD;EACF,CA3BD;;EA4BAR,SAAS,CAAC,MAAM;IACdW,YAAY;EACb,CAFQ,EAEN,EAFM,CAAT;EAGA,oBACE,QAAC,UAAD,CAAY,QAAZ;IAAqB,KAAK,EAAE;MAAEJ,OAAF;MAAWE;IAAX,CAA5B;IAAA,UACGH;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAzCD;;GAAMD,W;;KAAAA,W;AA2CN,OAAO,MAAMwB,gBAAgB,GAAG,MAAM;EAAA;;EACpC,OAAO9B,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;;IAAM0B,gB;;AAIb,SAAS1B,UAAT,EAAqBE,WAArB"},"metadata":{},"sourceType":"module"}